const cron = require('node-cron');
const User = require('../models/User');
const Task = require('../models/Task');
const Assignment = require('../models/Assignment');
const Notification = require('../models/Notification');

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á notifications ‡∏ã‡πâ‡∏≥ (‡πÄ‡∏õ‡πá‡∏ô in-memory cache)
const lastNotifications = {};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
const checkDeadlines = async () => {
  try {
    console.log('Running deadline check at:', new Date().toLocaleString());
    
    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const users = await User.find({});
    console.log(`Found ${users.length} users to check for notifications`);
    
    const now = new Date();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const thresholds = [
      { hours: 6, message: "‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á!" },
      { days: 1, message: "‚ö†Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏≠‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!" },
      { days: 3, message: "üìù ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏±‡∏ô" }
    ];
    
    for (const user of users) {
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (!lastNotifications[user._id]) {
        lastNotifications[user._id] = {};
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      await checkTasksForUser(user, now, thresholds);
      await checkAssignmentsForUser(user, now, thresholds);
    }
    
    console.log('Deadline check completed');
  } catch (error) {
    console.error('Error checking deadlines:', error);
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tasks ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á notifications ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 */
const checkTasksForUser = async (user, now, thresholds) => {
  // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  const tasks = await Task.find({
    assignedTo: user._id,
    status: { $ne: 'Done' },
    dueDate: { $gt: now } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  }).populate('project');
  
  for (const task of tasks) {
    const dueDate = new Date(task.dueDate);
    const timeLeft = dueDate - now;
    const hoursLeft = timeLeft / (1000 * 60 * 60);
    const daysLeft = hoursLeft / 24;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤
    for (const threshold of thresholds) {
      if (
        (threshold.hours && hoursLeft <= threshold.hours && hoursLeft > threshold.hours - 1) || 
        (threshold.days && daysLeft <= threshold.days && daysLeft > threshold.days - 0.2)
      ) {
        const notificationKey = `task_${task._id}_${threshold.hours || threshold.days}`;
        const lastNotified = lastNotifications[user._id][notificationKey];
        
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß > 20 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        if (!lastNotified || (now - lastNotified) > 20 * 60 * 60 * 1000) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const notification = new Notification({
            userId: user._id,
            title: threshold.message,
            content: `‡∏á‡∏≤‡∏ô: ${task.title}`,
            itemType: 'task',
            itemId: task._id,
            contextId: task.project?._id,
            contextName: task.project?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå',
            contextType: 'project',
            dueDate: dueDate,
            status: 'unread',
            thresholdType: threshold.hours ? 'hours' : 'days',
            thresholdValue: threshold.hours || threshold.days,
            delivered: { line: false, web: false }
          });
          
          await notification.save();
          console.log(`Created ${threshold.days ? threshold.days + ' days' : threshold.hours + ' hours'} notification for task ${task._id} to user ${user._id}`);
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô memory)
          lastNotifications[user._id][notificationKey] = now;
          
          break; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô
        }
      }
    }
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Assignments ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á notifications ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 */
const checkAssignmentsForUser = async (user, now, thresholds) => {
  // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô Assignments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const assignments = await Assignment.find({
    students: user._id,
    endDate: { $gt: now } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  }).populate('course');
  
  for (const assignment of assignments) {
    const dueDate = new Date(assignment.endDate);
    const timeLeft = dueDate - now;
    const hoursLeft = timeLeft / (1000 * 60 * 60);
    const daysLeft = hoursLeft / 24;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤
    for (const threshold of thresholds) {
      if (
        (threshold.hours && hoursLeft <= threshold.hours && hoursLeft > threshold.hours - 1) || 
        (threshold.days && daysLeft <= threshold.days && daysLeft > threshold.days - 0.2)
      ) {
        const notificationKey = `assignment_${assignment._id}_${threshold.hours || threshold.days}`;
        const lastNotified = lastNotifications[user._id][notificationKey];
        
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        if (!lastNotified || (now - lastNotified) > 20 * 60 * 60 * 1000) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const notification = new Notification({
            userId: user._id,
            title: threshold.message,
            content: `‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏á: ${assignment.title}`,
            itemType: 'assignment',
            itemId: assignment._id,
            contextId: assignment.course?._id,
            contextName: assignment.course?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤',
            contextType: 'course',
            dueDate: dueDate,
            status: 'unread',
            thresholdType: threshold.hours ? 'hours' : 'days',
            thresholdValue: threshold.hours || threshold.days,
            delivered: { line: false, web: false }
          });
          
          await notification.save();
          console.log(`Created ${threshold.days ? threshold.days + ' days' : threshold.hours + ' hours'} notification for assignment ${assignment._id} to user ${user._id}`);
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô memory)
          lastNotifications[user._id][notificationKey] = now;
          
          break; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô
        }
      }
    }
  }
};

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
 */
const setupScheduledJobs = () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  cron.schedule('0 * * * *', () => {
    checkDeadlines();
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
  checkDeadlines();
  
  console.log('Deadline notification scheduler initialized');
};

module.exports = {
  setupScheduledJobs,
  checkDeadlines
};