const cron = require('node-cron');
const User = require('../models/User');
const Task = require('../models/Task');
const Assignment = require('../models/Assignment');
const lineController = require('../controllers/lineController');

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥
const lastNotifications = {
  // userId: { taskId: timestamp, assignmentId: timestamp }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 */
const checkDeadlines = async () => {
  try {
    console.log('Running deadline check at:', new Date().toLocaleString());
    
    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ
    const users = await User.find({ lineUserId: { $ne: null } });
    console.log(`Found ${users.length} users with LINE accounts`);
    
    const now = new Date();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const thresholds = [
      { hours: 6, message: "‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á!" },
      { days: 1, message: "‚ö†Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏≠‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!" },
      { days: 3, message: "üìù ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏±‡∏ô" }
    ];
    
    for (const user of users) {
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (!lastNotifications[user._id]) {
        lastNotifications[user._id] = {};
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      await checkTasksForUser(user, now, thresholds);
      await checkAssignmentsForUser(user, now, thresholds);
    }
    
    console.log('Deadline check completed');
  } catch (error) {
    console.error('Error checking deadlines:', error);
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tasks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
 */
const checkTasksForUser = async (user, now, thresholds) => {
  // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  const tasks = await Task.find({
    assignedTo: user._id,
    status: { $ne: 'Done' },
    dueDate: { $gt: now } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  }).populate('project');
  
  for (const task of tasks) {
    const dueDate = new Date(task.dueDate);
    const timeLeft = dueDate - now;
    const hoursLeft = timeLeft / (1000 * 60 * 60);
    const daysLeft = hoursLeft / 24;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤
    for (const threshold of thresholds) {
      if (
        (threshold.hours && hoursLeft <= threshold.hours && hoursLeft > threshold.hours - 1) || 
        (threshold.days && daysLeft <= threshold.days && daysLeft > threshold.days - 0.2)
      ) {
        const lastNotified = lastNotifications[user._id][`task_${task._id}_${threshold.hours || threshold.days}`];
        
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß > 20 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        if (!lastNotified || (now - lastNotified) > 20 * 60 * 60 * 1000) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          const formatDueDate = dueDate.toLocaleString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });
          
          const message = `${threshold.message}\n\nüìå ‡∏á‡∏≤‡∏ô: ${task.title}\nüìÇ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: ${task.project.name}\n‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${formatDueDate}\n\n${getMotivationalQuote()}`;
          
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          const result = await lineController.sendLineNotification(user._id, message);
          
          if (result.success) {
            console.log(`Sent ${threshold.days ? threshold.days + ' days' : threshold.hours + ' hours'} notification for task ${task._id} to user ${user._id}`);
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            lastNotifications[user._id][`task_${task._id}_${threshold.hours || threshold.days}`] = now;
          }
          
          break; // ‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô
        }
      }
    }
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Assignments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
 */
const checkAssignmentsForUser = async (user, now, thresholds) => {
  // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô Assignments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const assignments = await Assignment.find({
    students: user._id,
    endDate: { $gt: now } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  }).populate('course');
  
  for (const assignment of assignments) {
    const dueDate = new Date(assignment.endDate);
    const timeLeft = dueDate - now;
    const hoursLeft = timeLeft / (1000 * 60 * 60);
    const daysLeft = hoursLeft / 24;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤
    for (const threshold of thresholds) {
      if (
        (threshold.hours && hoursLeft <= threshold.hours && hoursLeft > threshold.hours - 1) || 
        (threshold.days && daysLeft <= threshold.days && daysLeft > threshold.days - 0.2)
      ) {
        const lastNotified = lastNotifications[user._id][`assignment_${assignment._id}_${threshold.hours || threshold.days}`];
        
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        if (!lastNotified || (now - lastNotified) > 20 * 60 * 60 * 1000) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          const formatDueDate = dueDate.toLocaleString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });
          
          const message = `${threshold.message}\n\nüìö ‡∏á‡∏≤‡∏ô: ${assignment.title}\nüìù ‡∏ß‡∏¥‡∏ä‡∏≤: ${assignment.course.name}\n‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${formatDueDate}\n\n${getMotivationalQuote()}`;
          
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          const result = await lineController.sendLineNotification(user._id, message);
          
          if (result.success) {
            console.log(`Sent ${threshold.days ? threshold.days + ' days' : threshold.hours + ' hours'} notification for assignment ${assignment._id} to user ${user._id}`);
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            lastNotifications[user._id][`assignment_${assignment._id}_${threshold.hours || threshold.days}`] = now;
          }
          
          break; // ‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô
        }
      }
    }
  }
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à
 */
const getMotivationalQuote = () => {
  const quotes = [
    "üí™ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ! ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏µ",
    "üåü ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤",
    "üöÄ ‡∏ó‡∏≥‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    "‚è≥ ‡∏≠‡∏¢‡πà‡∏≤‡∏ú‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
  ];
  return quotes[Math.floor(Math.random() * quotes.length)];
};

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
 */
const setupScheduledJobs = () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  cron.schedule('0 * * * *', () => {
    checkDeadlines();
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
  checkDeadlines();
  
  console.log('Deadline notification scheduler initialized');
};

module.exports = {
  setupScheduledJobs,
  checkDeadlines
};