const cron = require('node-cron');
const User = require('../models/User');
const Task = require('../models/Task');
const Assignment = require('../models/Assignment');
const Notification = require('../models/Notification');
const lineController = require('../controllers/lineController');

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥ (‡πÄ‡∏õ‡πá‡∏ô in-memory cache)
const lastNotifications = {};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
 */
const checkDeadlinesAndNotify = async () => {
  try {
    console.log('Starting to check deadlines and notify users...');
    
    const now = new Date();
    const SIX_HOURS_MS = 6 * 60 * 60 * 1000;
    const ONE_DAY_MS = 24 * 60 * 60 * 1000;
    const THREE_DAYS_MS = 3 * 24 * 60 * 60 * 1000;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° notificationType ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    const thresholds = [
      { notificationType: 1, maxMs: SIX_HOURS_MS, message: '‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß! (‡∏≠‡∏µ‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)' },
      { notificationType: 2, maxMs: ONE_DAY_MS, message: 'üîî ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' },
      { notificationType: 3, maxMs: THREE_DAYS_MS, message: 'üìÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô' }
    ];

    const tasksWithAssignees = await Task.find({
      assignees: { $exists: true, $ne: [] }
    });

    const notificationsSent = { total: 0, line: 0 };

    for (const task of tasksWithAssignees) {
      const dueDate = new Date(task.dueDate);
      const timeLeftMs = dueDate - now;

      // ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ä‡πâ notificationType 0 (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
      if (timeLeftMs <= 0) {
        // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ 
        // ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ (continue)
        continue;
      }

      let matchedThreshold = null;
      if (timeLeftMs <= SIX_HOURS_MS) {
        matchedThreshold = thresholds[0]; // notificationType 1
      } else if (timeLeftMs <= ONE_DAY_MS) {
        matchedThreshold = thresholds[1]; // notificationType 2
      } else if (timeLeftMs <= THREE_DAYS_MS) {
        matchedThreshold = thresholds[2]; // notificationType 3
      } else {
        continue;
      }

      if (matchedThreshold) {
        for (const assigneeId of task.assignees) {
          try {
            const user = await User.findById(assigneeId);
            if (!user) continue;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const existingNotification = await Notification.findOne({
              userId: user._id,
              itemId: task._id,
              itemType: 'task',
              notificationType: matchedThreshold.notificationType
            });
            
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
            if (existingNotification) {
              continue;
            }

            const notification = new Notification({
              userId: user._id,
              title: matchedThreshold.message,
              content: task.taskName || task.title || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô',
              itemType: 'task',
              itemId: task._id,
              contextType: 'project',
              contextId: task.projectId || null,
              contextName: task.projectName || '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå',
              dueDate: dueDate,
              status: 'unread',
              notificationType: matchedThreshold.notificationType,
              delivered: { line: false, web: true }
            });

            try {
              await notification.save();
              notificationsSent.total++;

              if (user.lineUserId) {
                const formatDueDate = dueDate.toLocaleDateString('th-TH', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                });

                const message = `${matchedThreshold.message}\n\nüìå ‡∏á‡∏≤‡∏ô: ${task.taskName || task.title || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô'}\n‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${formatDueDate}`;
                const result = await lineController.sendLineNotification(user._id, message);

                if (result && result.success) {
                  notification.delivered.line = true;
                  await notification.save();
                  notificationsSent.line++;
                }
              }
            } catch (saveError) {
              console.error(`Error saving notification: ${saveError.message}`);
            }
          } catch (userError) {
            console.error(`Error looking up user ${assigneeId}: ${userError.message}`);
          }
        }
      }
    }

    console.log(`Notifications created: ${notificationsSent.total}, LINE messages sent: ${notificationsSent.line}`);
    return notificationsSent;
  } catch (error) {
    console.error('Error checking deadlines and notifying:', error);
    return null;
  }
};

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
 */
const setupScheduledJobs = () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  cron.schedule('0 * * * *', async () => {
    console.log('Running scheduled deadline check...');
    await checkDeadlinesAndNotify();
  });
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
  setTimeout(async () => {
    console.log('Running initial deadline check...');
    await checkDeadlinesAndNotify();
  }, 5000);
  
  console.log('Notification scheduler initialized');
};

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
module.exports = {
  checkDeadlinesAndNotify,
  setupScheduledJobs
};